"use strict";
/**
 * Unit Testing Otr.ByteBuffer
 * with QUnit
 *
 * @author Khandar William
 *
 * 2012-07-10 initial commit
 */

module('ByteBuffer');

function getRandomInt(min, max) {
	return Math.floor(Math.random() * (max - min + 1)) + min;
}

test('Byte', function () {
	var a, b, i,
		testdata = [];

	for (i=0; i<100; i++) {
		testdata.push(getRandomInt(0, 255));
	}
	a = new Otr.ByteBuffer();
	for (i=0; i<testdata.length; i++) {
		a.writeByte(testdata[i]);
	}
	equal(a.getLength(), 100, 'Length is 100');
	b = new Otr.ByteBuffer(a.data);
	for (i=0; i<testdata.length; i++) {
		equal(b.readByte(), testdata[i], 'Success storing byte '+testdata[i]);
	}
	b.reset();
	for (i=0; i<testdata.length; i++) {
		equal(b.byteAt(i), b.readByte(), 'ByteAt has same value as readByte '+b.byteAt(i));
	}
});

test('UInt', function () {
	var testdata = [];
	var i;
	for (i=0; i<100; i++) {
		testdata.push(getRandomInt(0, 4294967296));
	}
	var a = new Otr.ByteBuffer();
	for (i=0; i<testdata.length; i++) {
		a.writeUInt(testdata[i]);
	}
	equal(a.getLength(), 400, 'Length is 400');
	var b = new Otr.ByteBuffer(a.data);
	for (i=0; i<testdata.length; i++) {
		equal(b.readUInt(), testdata[i], 'Success storing UInt '+testdata[i]);
	}
});

test('Short', function () {
	var testdata = [];
	var i;
	for (i=0; i<100; i++) {
		testdata.push(getRandomInt(0, 65535));
	}
	var a = new Otr.ByteBuffer();
	for (i=0; i<testdata.length; i++) {
		a.writeShort(testdata[i]);
	}
	equal(a.getLength(), 200, 'Length is 200');
	var b = new Otr.ByteBuffer(a.data);
	for (i=0; i<testdata.length; i++) {
		equal(b.readShort(), testdata[i], 'Success storing Short '+testdata[i]);
	}
});

test('Bytes', function () {
	var a, c, i,
		testdata = [];

	for (i=0; i<10; i++) {
		testdata.push(getRandomInt(0, 255));
	}

	a = new Otr.ByteBuffer();
	a.writeBytes(testdata);
	equal(a.getLength(), testdata.length, 'Array length is the same');
	deepEqual(a.toByteArray(), testdata, 'writeBytes success');

	a.reset();
	c = a.readBytes(testdata.length);
	ok(c instanceof Array, 'readBytes produce Array');
	deepEqual(c, testdata, 'readBytes success');
	
});

test('Base64', function () {
	var testplain = [
			[0x6a, 0xc7, 0x5f, 0x6a, 0xc7, 0x5f, 0x6a, 0xc7, 0x5f],
			[0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0xc4, 0xa1, 0xa8, 0x32, 0xb4, 0xbe, 0x1c, 0x09, 0xc5, 0x0d, 0x1a, 0xcf, 0x37, 0x6f, 0x38, 0x9a, 0x4b, 0x2a, 0x13, 0xb7, 0x59, 0x64, 0x89, 0xd4, 0x19, 0xfa, 0x31, 0xd2, 0xd2, 0x7f, 0x74, 0x73, 0x12, 0x92, 0xef, 0x20, 0x93, 0x02, 0xc6, 0x19, 0x95, 0xfd, 0x0a, 0x3b, 0x1b, 0x86, 0x49, 0xbf, 0x2b, 0x6f, 0x65, 0x84, 0x31, 0xa4, 0x92, 0x56, 0x3e, 0x1f, 0xcc, 0x61, 0x50, 0xef, 0x08, 0x58, 0xb7, 0x8e, 0x48, 0xf6, 0x79, 0x7c, 0xbf, 0xd3, 0x86, 0x6c, 0x76, 0xb8, 0xe9, 0xf3, 0x32, 0x5e, 0x16, 0x68, 0x75, 0xaf, 0xb9, 0xd7, 0x6f, 0x72, 0x49, 0x1a, 0x28, 0xcf, 0x5a, 0xd8, 0x69, 0x8e, 0xfb, 0xe0, 0x70, 0x75, 0x42, 0x9c, 0x91, 0x05, 0x2d, 0x9f, 0x57, 0x9f, 0x9e, 0xe2, 0xdc, 0x8b, 0xc5, 0x45, 0x7f, 0x4f, 0x65, 0x2d, 0xe5, 0x73, 0xf2, 0xd7, 0x5b, 0x3e, 0xca, 0x9d, 0x60, 0xea, 0x9f, 0xcb, 0x16, 0x8c, 0xbc, 0x8f, 0x73, 0xef, 0x8b, 0x0e, 0x61, 0xde, 0x05, 0xb1, 0x4f, 0x91, 0xc4, 0xd5, 0x14, 0x26, 0xd6, 0x71, 0xff, 0x3f, 0xb1, 0xd6, 0x71, 0x2f, 0xd7, 0x6a, 0xca, 0x04, 0x90, 0x45, 0x6a, 0x9e, 0x54, 0xde, 0x56, 0xd0, 0x74, 0x82, 0x5c, 0xff, 0xc8, 0xa6, 0xad, 0x34, 0xb8, 0x9d, 0xfc, 0x31, 0xda, 0x9d, 0x95, 0xa1, 0x7c, 0x2b, 0xd1, 0x7a, 0xde, 0x0c, 0x2d, 0x24, 0x6a, 0x07, 0x35, 0x62, 0xb8, 0x00, 0x00, 0x00, 0x20, 0x66, 0x7c, 0x83, 0xb0, 0x24, 0x96, 0x55, 0x11, 0x5a, 0x05, 0x55, 0xa4, 0x20, 0x27, 0x97, 0xbc, 0x35, 0x5d, 0xc9, 0x40, 0x9c, 0x22, 0x93, 0x11, 0xa6, 0x50, 0x70, 0x16, 0xee, 0xd8, 0x93, 0xf1],
			[0x00, 0x02, 0x0a, 0x00, 0x00, 0x00, 0xc0, 0xd3, 0xde, 0x29, 0xd3, 0x98, 0x08, 0x45, 0x91, 0x23, 0xc2, 0x6e, 0x9d, 0xb3, 0xf3, 0x31, 0x6a, 0xb8, 0xfc, 0xd2, 0x90, 0x37, 0x9e, 0xe6, 0x4b, 0x4b, 0xcc, 0xfb, 0x46, 0xe1, 0xf5, 0x6e, 0x03, 0x53, 0x6a, 0x72, 0x6e, 0xa5, 0x35, 0x0a, 0x67, 0xae, 0xd9, 0x48, 0x0a, 0xac, 0xfe, 0xd1, 0x0f, 0x79, 0x55, 0xce, 0x3e, 0x5b, 0x9b, 0x77, 0x21, 0x73, 0x8d, 0x2a, 0x12, 0xc3, 0x90, 0xd1, 0x00, 0xf1, 0x03, 0x3c, 0xdf, 0x97, 0xe5, 0x89, 0x07, 0x66, 0x36, 0x41, 0xfb, 0x78, 0x19, 0x8d, 0x18, 0x17, 0xa7, 0x25, 0x97, 0x18, 0x35, 0x6e, 0x09, 0xa7, 0xde, 0x31, 0x61, 0x10, 0x4a, 0x1c, 0xc3, 0xdc, 0x05, 0x8b, 0x43, 0x45, 0xf3, 0xbe, 0x9b, 0xb6, 0x8a, 0xe5, 0x8b, 0x9e, 0xa3, 0xd6, 0x08, 0x55, 0x66, 0x97, 0x0a, 0x10, 0xb6, 0x15, 0x17, 0x84, 0xb9, 0xae, 0x53, 0x3e, 0x4f, 0x3f, 0x18, 0x76, 0x35, 0x04, 0xd9, 0x77, 0xf6, 0xf8, 0x80, 0xbc, 0x9b, 0xa5, 0x3d, 0xf4, 0x4c, 0xf5, 0x22, 0x29, 0x8e, 0x8b, 0xf1, 0x8b, 0x8c, 0xd3, 0xc2, 0xc7, 0x35, 0x84, 0xd5, 0x1b, 0x65, 0xf5, 0xd1, 0x0e, 0x6e, 0x8a, 0xcf, 0xdd, 0x45, 0xc2, 0x61, 0xfb, 0xa7, 0x4b, 0x17, 0xd8, 0x04, 0xf0, 0x6f, 0xa8, 0xb7, 0x3e, 0xe1, 0xc7, 0x10, 0x1b, 0xc0, 0x72, 0xe6, 0x13, 0xff, 0x36, 0x2e, 0xec, 0x9b],
			[0x00, 0x02, 0x11, 0x00, 0x00, 0x00, 0x10, 0x98, 0xf7, 0xfb, 0x70, 0xe6, 0x30, 0xb3, 0xf9, 0x20, 0x6e, 0x99, 0x6a, 0x80, 0xfc, 0x1c, 0x1d, 0x00, 0x00, 0x01, 0xd2, 0xfe, 0x92, 0x90, 0x14, 0xde, 0x22, 0x3a, 0x4b, 0x1e, 0x5f, 0x9c, 0xdb, 0x9e, 0x63, 0x32, 0xc1, 0x2b, 0xad, 0x3d, 0x6b, 0x43, 0xcd, 0x35, 0xfd, 0x2c, 0xf7, 0x01, 0x2a, 0x33, 0x26, 0x3b, 0x12, 0x14, 0x0e, 0xb1, 0x44, 0x36, 0x58, 0x59, 0xbf, 0x2e, 0xcc, 0x12, 0x62, 0xe1, 0xd7, 0xb6, 0x14, 0x42, 0x40, 0x1f, 0x09, 0x0e, 0x55, 0x62, 0x49, 0xf3, 0x16, 0xbd, 0xb1, 0x34, 0xfc, 0xc9, 0x2e, 0x25, 0xdd, 0x57, 0x2a, 0x80, 0xe7, 0xe6, 0x05, 0x88, 0x68, 0x5c, 0xf9, 0xf3, 0x05, 0x64, 0xce, 0xea, 0xc4, 0x77, 0x19, 0x02, 0x29, 0xef, 0x2f, 0x06, 0xcf, 0xf6, 0x91, 0x36, 0xd5, 0xf2, 0x72, 0xf6, 0xc2, 0x33, 0x3c, 0x06, 0xf2, 0xf8, 0xb8, 0xe6, 0x69, 0x80, 0xac, 0xf7, 0xae, 0x67, 0xd7, 0xb0, 0x70, 0x1e, 0x63, 0x10, 0x86, 0x0f, 0x23, 0xae, 0x5b, 0xbe, 0x21, 0xd1, 0x30, 0x7b, 0x27, 0xaa, 0x30, 0x8b, 0xdc, 0xcc, 0x09, 0x03, 0x11, 0x2d, 0x81, 0xd5, 0x7f, 0xb1, 0x7a, 0x5c, 0x3b, 0xd3, 0x29, 0x89, 0x3c, 0x6e, 0x4f, 0xb0, 0xb7, 0xd7, 0x8f, 0xb9, 0xf4, 0xe6, 0x5c, 0xe8, 0x64, 0x93, 0x48, 0xfc, 0x03, 0x5c, 0xf4, 0xcd, 0x29, 0xcc, 0xa8, 0x34, 0xde, 0x50, 0xa4, 0xe1, 0xbf, 0x64, 0xc2, 0xf6, 0xa1, 0xfb, 0x22, 0x7f, 0x21, 0x7c, 0xda, 0xee, 0x84, 0x75, 0xaa, 0x86, 0x97, 0xb2, 0x04, 0x63, 0x3b, 0x2d, 0x96, 0xb8, 0x0a, 0x54, 0x6c, 0x1c, 0xb1, 0x1a, 0x5f, 0x76, 0x1d, 0x78, 0x41, 0x0a, 0x42, 0x98, 0xdb, 0x02, 0xe2, 0x79, 0xcd, 0xf5, 0x68, 0xe6, 0x35, 0xa9, 0xa0, 0x50, 0x0a, 0x23, 0xf1, 0xc8, 0xc5, 0xfb, 0x09, 0xf9, 0x7a, 0x8e, 0xbe, 0x94, 0x91, 0x27, 0xa0, 0x4c, 0xdd, 0x76, 0xf6, 0xb7, 0xe5, 0xce, 0x0c, 0x40, 0x2b, 0x2b, 0xfd, 0x12, 0xe1, 0x0b, 0x66, 0x09, 0xdc, 0x97, 0x16, 0xa3, 0x8e, 0x47, 0x0f, 0x2e, 0xa7, 0x52, 0xbe, 0x40, 0x46, 0x0c, 0x13, 0x08, 0xde, 0x9b, 0x4e, 0xc0, 0x06, 0x2a, 0xff, 0x6f, 0xa2, 0x15, 0x21, 0x2e, 0x2a, 0x23, 0xdf, 0x41, 0x2b, 0x29, 0x9b, 0x21, 0xe8, 0xa4, 0xb4, 0x14, 0x71, 0xb3, 0x36, 0x75, 0x04, 0x77, 0x47, 0xb0, 0x01, 0x16, 0x7d, 0xeb, 0x43, 0x60, 0xe7, 0x28, 0x2a, 0x82, 0xf3, 0x16, 0x0b, 0x42, 0x96, 0xd8, 0x5a, 0x1c, 0x7c, 0xe8, 0xb5, 0x5e, 0x84, 0x42, 0x31, 0xd7, 0x0c, 0x8d, 0xa6, 0x43, 0x27, 0x59, 0xba, 0x0d, 0x0d, 0x77, 0x90, 0x1a, 0x5c, 0x13, 0xb5, 0x63, 0xa3, 0x76, 0x13, 0x82, 0x61, 0x49, 0xe5, 0x09, 0x91, 0x40, 0xd9, 0x17, 0xa7, 0x64, 0xb0, 0x0b, 0xad, 0xab, 0xeb, 0xed, 0x91, 0xfb, 0x52, 0xc9, 0x99, 0xd8, 0xfe, 0x53, 0x18, 0xd3, 0xbd, 0x1b, 0xd5, 0x7d, 0xf8, 0x63, 0xf2, 0xb4, 0x44, 0x52, 0xe6, 0x2e, 0xd5, 0x27, 0x3e, 0x6d, 0xa1, 0x1b, 0x97, 0x1c, 0x88, 0xf4, 0x43, 0x7f, 0xc4, 0x04, 0x31, 0xcf, 0xe5, 0x09, 0x41, 0x94, 0x10, 0x07, 0xf6, 0x6e, 0x5e, 0x21, 0x2d, 0xc2, 0xee, 0x2e, 0xb4, 0x85, 0x69, 0xb2, 0xb3, 0x35, 0x51, 0xef, 0x02, 0x4b, 0xf2, 0xe4, 0xb9, 0xd1, 0x24, 0xdf, 0xc8, 0xcc, 0x82, 0x63, 0x43, 0x3f, 0x19, 0xb2, 0xa5, 0x30, 0xd2, 0x8c, 0x2f, 0xc6, 0xc2, 0x9f, 0x71, 0x16, 0xe7, 0x95, 0x72, 0x03, 0x31, 0x66, 0x40, 0x12, 0x1b, 0xee, 0x58, 0x1c, 0xa5, 0x50, 0x71, 0x93, 0x96, 0xf7, 0xa3, 0x3c, 0xc8, 0xc1, 0x87, 0x95, 0xa4, 0xa8, 0x8f, 0xd6, 0x80, 0x22, 0xf9, 0x24, 0xe2],
			[0x00, 0x02, 0x12, 0x00, 0x00, 0x01, 0xd2, 0x2c, 0x8c, 0x56, 0xc8, 0x76, 0xa4, 0x3b, 0x83, 0xe9, 0xc7, 0xc0, 0xdb, 0x48, 0x4d, 0x89, 0x09, 0xe6, 0xa6, 0xe2, 0xaf, 0x2e, 0xf7, 0xb2, 0x2d, 0x5a, 0xc9, 0x77, 0x82, 0xd7, 0x18, 0x5e, 0xe2, 0xfa, 0xed, 0xbc, 0xcf, 0x59, 0x20, 0x5b, 0xe7, 0x5a, 0x50, 0x67, 0x64, 0x3b, 0x7b, 0x08, 0xfe, 0x2f, 0xa4, 0x0d, 0xbd, 0xb8, 0x9f, 0x8b, 0x0e, 0x95, 0x06, 0xd6, 0x05, 0x3c, 0xd8, 0xb2, 0xdd, 0xd8, 0x62, 0xc0, 0x0a, 0xba, 0x55, 0xbc, 0x52, 0xbf, 0x5c, 0x33, 0x96, 0x16, 0x41, 0xf7, 0x36, 0xfd, 0x05, 0x76, 0xe4, 0xab, 0xbd, 0x51, 0x54, 0x52, 0xc8, 0x4e, 0x01, 0x03, 0x45, 0x8c, 0xcf, 0x7a, 0xba, 0x55, 0x73, 0xa0, 0x33, 0x24, 0x7f, 0xda, 0xf8, 0xc0, 0xe1, 0x51, 0x67, 0x17, 0x81, 0x3f, 0x9f, 0xdc, 0xa8, 0xd2, 0xa6, 0x45, 0x31, 0x3d, 0x4c, 0xe6, 0x47, 0xb4, 0xc7, 0x87, 0xc9, 0x84, 0xd8, 0x2d, 0x0e, 0x51, 0x3e, 0xa1, 0x90, 0x24, 0x55, 0xa2, 0x10, 0x09, 0xe4, 0x28, 0x77, 0x09, 0xbd, 0x0d, 0xd8, 0x7e, 0xfa, 0xfd, 0xe1, 0x34, 0x8d, 0x63, 0x72, 0x88, 0x69, 0xa3, 0x07, 0x1b, 0x86, 0xfa, 0xd6, 0x5b, 0x43, 0xbb, 0xf4, 0x9d, 0xc8, 0xe0, 0x29, 0x04, 0x6e, 0x81, 0x5d, 0xc7, 0x91, 0xa4, 0xa9, 0x2b, 0x5b, 0x71, 0x92, 0xac, 0x32, 0x1b, 0x89, 0x7c, 0x71, 0xc2, 0x4f, 0xd0, 0x3c, 0x84, 0xc3, 0x53, 0x8f, 0x65, 0x80, 0xaa, 0x2e, 0x9b, 0x76, 0xc9, 0x92, 0x91, 0xe3, 0xb5, 0x6e, 0x5a, 0xad, 0x5b, 0x93, 0x8a, 0x03, 0x7c, 0x15, 0x4f, 0x10, 0x55, 0x9a, 0x25, 0x8f, 0x6b, 0x3f, 0x0e, 0x40, 0x0f, 0x37, 0x39, 0xae, 0x04, 0x08, 0xac, 0xbc, 0xc9, 0xa3, 0xba, 0xe5, 0x2e, 0x8d, 0x7e, 0xa9, 0x59, 0x1e, 0x1f, 0xb5, 0xb6, 0x38, 0xea, 0x56, 0xfe, 0x4a, 0xe2, 0x9f, 0xc4, 0x01, 0x63, 0x39, 0x57, 0x20, 0x3a, 0x70, 0x03, 0x67, 0x7d, 0x83, 0x39, 0x69, 0x66, 0x27, 0x25, 0x10, 0x00, 0xe9, 0x2a, 0x99, 0x39, 0x90, 0x08, 0xb2, 0x51, 0xc0, 0x7b, 0x6e, 0x15, 0x8b, 0xff, 0xa6, 0x4f, 0xe2, 0xf9, 0x55, 0x00, 0x38, 0x5c, 0x14, 0xed, 0x81, 0x73, 0x98, 0x1b, 0xd9, 0x60, 0xeb, 0xc2, 0xa3, 0x2b, 0xe2, 0xa7, 0x5f, 0x4b, 0x0f, 0xc7, 0x87, 0x85, 0x33, 0xc1, 0xad, 0x81, 0x00, 0x4c, 0x90, 0x07, 0x74, 0x92, 0xc8, 0xfd, 0x47, 0x92, 0x76, 0x91, 0x98, 0xc2, 0x52, 0x0e, 0x21, 0x22, 0x4b, 0x50, 0x33, 0x53, 0x40, 0xf9, 0x54, 0x8a, 0x86, 0x54, 0xa1, 0x8d, 0x16, 0xde, 0xb5, 0x63, 0x01, 0xcf, 0x0c, 0xfb, 0x0c, 0x20, 0x1b, 0x5e, 0x88, 0x8a, 0x1f, 0xd4, 0x72, 0xac, 0x05, 0x4f, 0x5e, 0x02, 0x50, 0x07, 0xdc, 0x4a, 0xdb, 0x27, 0x09, 0x8e, 0xff, 0xcb, 0xb8, 0x78, 0x99, 0x30, 0xb1, 0x01, 0x5b, 0x95, 0xb9, 0x5d, 0xb6, 0xf4, 0x6b, 0x59, 0x2e, 0xa3, 0x06, 0xcf, 0x6c, 0x5e, 0x6a, 0x74, 0x84, 0xb9, 0x52, 0xf6, 0x12, 0x67, 0x9e, 0xec, 0xd3, 0x0b, 0xd9, 0xb5, 0xb5, 0xa9, 0x17, 0xdf, 0xe2, 0x4e, 0x76, 0x58, 0x2f, 0xe6, 0xc3, 0x85, 0x69, 0xe2, 0x69, 0xbe, 0x18, 0xea, 0xb5, 0x0b, 0x49, 0x97, 0xf5, 0x86, 0x63, 0x1d, 0x1d, 0xa8, 0x3f, 0x75, 0x0e, 0xef, 0xab, 0xf6, 0xbd, 0x12, 0xec, 0xb6, 0xd1, 0x14, 0x16, 0xec, 0x67, 0xd3, 0x64, 0xff, 0xc7, 0x91, 0x61, 0xb1, 0x1a, 0x8d, 0x45, 0x0c, 0xb2, 0x5c, 0x2d, 0xd9, 0xba, 0x32, 0xc9, 0x79, 0x98, 0xa3, 0x0b, 0x78, 0xa4, 0xc8, 0xd0],
			[0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc0, 0x25, 0xa0, 0x8f, 0xd0, 0xff, 0x39, 0xc4, 0x23, 0xb3, 0x1e, 0x18, 0x30, 0x02, 0x5d, 0x51, 0x6a, 0xc2, 0xe9, 0x7f, 0xa4, 0xa0, 0xad, 0xc0, 0xac, 0x6d, 0xad, 0x56, 0xd5, 0x22, 0xc1, 0x52, 0x23, 0xeb, 0xc2, 0xc4, 0x36, 0x19, 0x9f, 0xdc, 0xd6, 0x53, 0x53, 0x3d, 0xb2, 0x85, 0xae, 0x7f, 0x4b, 0xd0, 0xb3, 0x62, 0x71, 0x8c, 0xc4, 0x4b, 0x7a, 0x2d, 0xae, 0xd5, 0xb3, 0xc5, 0x63, 0xa6, 0x6e, 0xc2, 0x6d, 0x7d, 0xd8, 0x00, 0x9f, 0xe0, 0x98, 0x15, 0x18, 0x39, 0x47, 0x39, 0xb1, 0x4e, 0xe9, 0x7a, 0xd2, 0x91, 0x5f, 0x7f, 0x8b, 0xc1, 0x58, 0x10, 0x04, 0x4b, 0x07, 0x5a, 0x20, 0x39, 0xeb, 0x07, 0x3c, 0x11, 0x42, 0x9c, 0xec, 0x80, 0x06, 0x79, 0xf4, 0xec, 0x09, 0x5a, 0x16, 0x5d, 0x0f, 0x1b, 0xc3, 0xbc, 0xf3, 0x68, 0x58, 0x84, 0xda, 0x6e, 0x4c, 0xe9, 0xd0, 0xb1, 0x6f, 0x1b, 0x14, 0x7d, 0xd6, 0xf8, 0x68, 0xf2, 0x63, 0x8c, 0x0e, 0xd1, 0x63, 0x6e, 0x63, 0x8f, 0x1a, 0x33, 0x62, 0xd7, 0x9b, 0x34, 0xf9, 0x82, 0x40, 0xb0, 0xdf, 0x1b, 0x68, 0xcb, 0x54, 0x16, 0xc5, 0x87, 0x08, 0x2b, 0x43, 0xe5, 0xa1, 0x1e, 0xb8, 0xfe, 0xd3, 0xe9, 0x00, 0x01, 0x37, 0x2e, 0x15, 0x2a, 0x79, 0x39, 0x99, 0xaa, 0x89, 0x22, 0xfb, 0xe5, 0x0b, 0xcf, 0xbf, 0xcc, 0xd8, 0x06, 0x59, 0x47, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x2d, 0xbd, 0xdd, 0xd8, 0xd2, 0xaf, 0xa1, 0x55, 0x61, 0x88, 0xe0, 0x91, 0xad, 0xe0, 0xe0, 0xf3, 0xdb, 0x9e, 0xaf, 0xa3, 0x8c, 0x91, 0x53, 0x00, 0x00, 0x00, 0x14, 0xda, 0x5c, 0xe5, 0x04, 0x19, 0x7a, 0xab, 0xd5, 0xdc, 0xdb, 0x64, 0x1e, 0x0c, 0xce, 0x24, 0x5c, 0x72, 0x6b, 0x26, 0x15]
		],
		testbase64 = [
			'asdfasdfasdf',
			'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'
		],
		a, b, i;

	for (i=0; i<testplain.length; i++) {
		a = Otr.ByteBuffer.fromBase64(testbase64[i]);
		deepEqual(a.toByteArray(), testplain[i], 'fromBase64 test '+i);

		b = new Otr.ByteBuffer();
		b.writeBytes(testplain[i]);
		equal(b.toBase64(), testbase64[i], 'toBase64 test '+i);
	}
});

test('Data', function () {
	var data1 = [], data2 = [], data3 = [],
		buff = new Otr.ByteBuffer(),
		i, num = 100;

	i = num;
	while (i--) {
		data1.push(getRandomInt(0, 255));
		data2.push(getRandomInt(0, 255));
		data3.push(getRandomInt(0, 255));
	}
	data1 = new Otr.Type.Data(data1);
	data2 = new Otr.Type.Data(data2);
	data3 = new Otr.Type.Data(data3);
	buff.writeData(data1);
	buff.writeData(data2);
	buff.writeData(data3);
	buff.reset();
	ok(buff.readData().equals(data1), 'read/write Data');
	ok(buff.readData().equals(data2), 'read/write Data');
	ok(buff.readData().equals(data3), 'read/write Data');
});

test('MPI', function () {
	var data1 = [], data2 = [], data3 = [],
		buff = new Otr.ByteBuffer(),
		i, num = 100;

	i = num;
	while (i--) {
		data1.push(getRandomInt(0, 255));
		data2.push(getRandomInt(0, 255));
		data3.push(getRandomInt(0, 255));
	}
	data1 = new Otr.Type.MPI(data1);
	data2 = new Otr.Type.MPI(data2);
	data3 = new Otr.Type.MPI(data3);
	buff.writeMPI(data1);
	buff.writeMPI(data2);
	buff.writeMPI(data3);
	buff.reset();
	ok(buff.readMPI().equals(data1), 'read/write MPI');
	ok(buff.readMPI().equals(data2), 'read/write MPI');
	ok(buff.readMPI().equals(data3), 'read/write MPI');
});